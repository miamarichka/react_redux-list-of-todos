{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/utils/utils.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoActionTypes","FilterActionsTypes","actions","todo","type","SET","payload","REMOVE","currentTodoReducer","state","action","setQuery","query","QUERY","setSelect","select","SELECT","console","log","TodosActionType","defaultState","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","filteredTodos","visibleTodos","status","completed","filterByStatus","normalizedQuery","trim","toLowerCase","title","includes","filterWithQuery","getFilteredTodos","length","className","map","isCurrent","id","classNames","onClick","TodoFilter","onSubmit","event","preventDefault","value","onChange","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","isLoading","setIsLoading","isError","setIsError","currentUser","setCurrentUser","loadUserInfo","a","userId","user","useEffect","href","email","name","App","loadTodos","todoResponce","Root","ReactDOM","render","document","getElementById"],"mappings":"6KAEYA,E,gEAAAA,K,4BAAAA,E,uBAAAA,M,KAcZ,ICbYC,EDqBCC,EANG,SAACC,GAAD,MAAgC,CAC9CC,KAAMJ,EAAgBK,IACtBC,QAASH,IAIED,EARM,iBAAyB,CAAEE,KAAMJ,EAAgBO,SA4BrDC,EAfY,WAGd,IAFXC,EAEU,uDAFK,KACfC,EACU,uCACV,OAAQA,EAAON,MAEb,KAAKJ,EAAgBK,IACnB,OAAOK,EAAOJ,QAChB,KAAKN,EAAgBO,OACnB,OAAO,KACT,QACE,OAAOE,I,iBCrCDR,K,yBAAAA,E,4BAAAA,M,KAQZ,IAUaC,EAAU,CAAES,SAVR,SAACC,GAAD,MAAuC,CACtDR,KAAMH,EAAmBY,MACzBP,QAASM,IAQwBE,UALjB,SAACC,GAAD,MAAyC,CACzDX,KAAMH,EAAmBe,OACzBV,QAASS,KAIXE,QAAQC,IAAIhB,GASZ,IC7BYiB,ED6BNC,EAAsB,CAC1BR,MAAO,GACPG,OAAQ,OAcKM,EAXO,WAAkD,IAAjDZ,EAAgD,uDAAjCW,EAAcV,EAAmB,uCACrE,OAAQA,EAAON,MACb,KAAKH,EAAmBY,MACtB,OAAO,2BAAKJ,GAAZ,IAAmBG,MAAOF,EAAOJ,UACnC,KAAKL,EAAmBe,OACtB,OAAO,2BAAKP,GAAZ,IAAmBM,OAAQL,EAAOJ,UACpC,QACE,OAAOG,K,SCzCDU,K,iBAAAA,M,KAMZ,IAKajB,EALD,SAACoB,GAAD,MAA+B,CACzClB,KAAMe,EAAgBd,IACtBC,QAASgB,IAaIC,EARM,WAA4C,IAA3Cd,EAA0C,uDAA1B,GAAIC,EAAsB,uCAC9D,OAAIA,EAAON,OAASe,EAAgBd,IAC3BK,EAAOJ,QAGTG,GCZHe,EAAcC,0BAAgB,CAClCC,YAAalB,EACbmB,OAAQN,EACRC,MAAOC,IAIIK,EAAQC,sBACnBL,EACAM,8BACEC,0BAAgBC,O,oECfPC,EAAoCC,IACpCC,EAAkDC,I,OCGlDC,EAAqB,WAChC,IAAMf,EAAQa,GAAe,SAAA1B,GAAK,OAAIA,EAAMa,SACtCI,EAAcS,GAAe,SAAA1B,GAAK,OAAIA,EAAMiB,eAC5CC,EAASQ,GAAe,SAAA1B,GAAK,OAAIA,EAAMkB,UACvCW,EAAWL,IAEXM,ECSwB,SAACjB,EAAeK,GAC9C,IAAQf,EAAkBe,EAAlBf,MACJ4B,EAbiB,SAAClB,EAAemB,GACrC,OAAQA,GACN,IAAK,SACH,OAAOnB,EAAMK,QAAO,SAAAxB,GAAI,OAAKA,EAAKuC,aACpC,IAAK,YACH,OAAOpB,EAAMK,QAAO,SAAAxB,GAAI,OAAIA,EAAKuC,aACnC,QACE,OAAOpB,GAMQqB,CAAerB,EADRK,EAAXZ,QAOf,OAJIH,IACF4B,EAxBoB,SAAClB,EAAeV,GACtC,IAAMgC,EAAkBhC,EAAMiC,OAAOC,cAErC,OAAOxB,EAAMK,QAAO,SAAAxB,GAAI,OAAIA,EAAK4C,MAAMD,cAAcE,SACnDJ,MAoBeK,CAAgBT,EAAc5B,IAGxC4B,EDjBeU,CAAiB5B,EAAOK,GAE9C,OACE,mCACIY,EAAcY,OAOZ,wBAAOC,UAAU,+BAAjB,UACE,gCACE,+BACE,mCAEA,6BACE,sBAAMA,UAAU,OAAhB,SACE,mBAAGA,UAAU,qBAIjB,uCACA,wCAIJ,gCACGb,EAAcc,KAAI,SAAAlD,GACjB,IAAMmD,GAAuB,OAAX5B,QAAW,IAAXA,OAAA,EAAAA,EAAa6B,MAAOpD,EAAKoD,GAE3C,OACE,qBAAI,UAAQ,OAAZ,UACE,oBAAIH,UAAU,eAAd,SAA8BjD,EAAKoD,KACnC,oBAAIH,UAAU,eAAd,SACGjD,EAAKuC,WACJ,sBAAMU,UAAU,OAAO,UAAQ,gBAA/B,SACE,mBAAGA,UAAU,qBAMnB,oBAAIA,UAAU,2BAAd,SACE,mBAAGA,UAAWI,IACZrD,EAAKuC,UAAY,mBAAqB,mBADxC,SAIGvC,EAAK4C,UAIV,oBAAIK,UAAU,8BAAd,SACE,wBACE,UAAQ,eACRA,UAAU,SACVhD,KAAK,SACLqD,QAAS,kBAAMnB,EAASpC,EAAgBC,KAJ1C,SAME,sBAAMiD,UAAU,OAAhB,SACE,mBAAGA,UAAWI,IAAW,MAAO,CAC9B,eAAgBF,EAChB,UAAWA,cA9BGnD,EAAKoD,YA1BrC,mBAAGH,UAAU,0BAAb,oEEdGM,EAAuB,WAClC,MAA0BvB,GAAe,SAAA1B,GAAK,OAAIA,EAAMkB,UAAhDf,EAAR,EAAQA,MAAOG,EAAf,EAAeA,OACTuB,EAAWL,IAcjB,OACE,uBACEmB,UAAU,mBACVO,SAAU,SAAAC,GAAK,OAAIA,EAAMC,kBAF3B,UAIE,mBAAGT,UAAU,UAAb,SACE,sBAAMA,UAAU,SAAhB,SACE,yBACE,UAAQ,eACRU,MAAO/C,EACPgD,SAtBiB,SAACH,GAC1BtB,EAASpC,EAAQY,UAAU8C,EAAMI,OAAOF,SAkBlC,UAKE,wBAAQA,MAAM,MAAd,iBACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,YAAd,8BAKN,oBAAGV,UAAU,qDAAb,UACE,uBACE,UAAQ,cACRhD,KAAK,OACLgD,UAAU,QACVa,YAAY,YACZH,MAAOlD,EACPmD,SAlCiB,SAACH,GACxBtB,EAASpC,EAAQS,SAASiD,EAAMI,OAAOF,WAmCnC,sBAAMV,UAAU,eAAhB,SACE,mBAAGA,UAAU,8BAGf,sBAAMA,UAAU,gBAAgBc,MAAO,CAAEC,cAAe,OAAxD,SAEE,wBACE,UAAQ,oBACR/D,KAAK,SACLgD,UAAU,SACVK,QA1Ce,WACvBnB,EAASpC,EAAQS,SAAS,iBCfjByD,G,MAAmB,kBAC9B,qBAAKhB,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,wBCOnB,SAASiB,EAAOC,GAEd,IARYC,EAQNC,EAVS,iEAUYF,EAAM,QAEjC,OAVYC,EAUA,IATL,IAAIE,SAAQ,SAAAC,GACjBC,WAAWD,EAASH,OASnBK,MAAK,kBAAMC,MAAML,MACjBI,MAAK,SAAAE,GAAG,OAAIA,EAAIC,UAGd,ICdMC,EAAsB,WACjC,IAAMtD,EAAcS,GAAe,SAAA1B,GAAK,OAAIA,EAAMiB,eAC5CY,EAAWL,IACjB,EAAkCgD,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA8BF,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAAsCJ,mBAAsB,MAA5D,mBAAOK,EAAP,KAAoBC,EAApB,KAEMC,EAAY,uCAAG,4BAAAC,EAAA,kEAEjBJ,GAAW,GACXF,GAAa,IACTzD,EAJa,gCDSCgE,ECJWhE,EAAY6B,GDIJc,EAAG,iBAAiBqB,ICTxC,QAKTC,EALS,SAQbJ,EAAeI,GARF,yDAYjBN,GAAW,GAZM,yBAcjBF,GAAa,GAdI,+CDSA,IAACO,ICTD,2BAAH,qDAkBlBE,qBAAU,WAGR,OAFAJ,IAEO,WACLD,EAAe,SAEhB,CAAC7D,IAMJ,OACE,sBAAK0B,UAAU,kBAAkB,UAAQ,QAAzC,UACE,qBAAKA,UAAU,qBAEd8B,IAAcE,GAAW,cAAC,EAAD,KAExBF,IAAcE,GACd,sBAAKhC,UAAU,aAAf,UACE,yBAAQA,UAAU,kBAAlB,UACE,qBACEA,UAAU,0CACV,UAAQ,eAFV,gCAIY1B,QAJZ,IAIYA,OAJZ,EAIYA,EAAa6B,MAIzB,wBACEnD,KAAK,SACLgD,UAAU,SACV,UAAQ,cACRK,QAAS,WAxBnBnB,EAASpC,WA4BH,sBAAKkD,UAAU,kBAAf,UACE,mBAAGA,UAAU,QAAQ,UAAQ,cAA7B,gBACG1B,QADH,IACGA,OADH,EACGA,EAAaqB,QAEJ,OAAXrB,QAAW,IAAXA,KAAagB,UACT,wBAAQU,UAAU,mBAAlB,kBACA,wBAAQA,UAAU,kBAAlB,qBACL,mBAAGA,UAAU,QAAQ,UAAQ,aAA7B,SACE,mBAAGyC,KAAI,wBAAYP,QAAZ,IAAYA,OAAZ,EAAYA,EAAaQ,OAAhC,gBACGR,QADH,IACGA,OADH,EACGA,EAAaS,mBCjEjBC,EAAgB,WAC3B,IAAM1E,EAAQa,GAAe,SAAA1B,GAAK,OAAIA,EAAMa,SACtCI,EAAcS,GAAe,SAAA1B,GAAK,OAAIA,EAAMiB,eAC5CY,EAAWL,IACjB,EAAkCgD,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA8BF,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KAEMY,EAAS,uCAAG,4BAAAR,EAAA,sEAEdN,GAAa,GACbE,GAAW,GAHG,SFCUhB,EAAY,UEDtB,QAIR6B,EAJQ,QAMG/C,QACfb,EAASpC,EAAYgG,IAPT,gDAUdb,GAAW,GAVG,yBAYdF,GAAa,GAZC,4EAAH,qDAwBf,OARAS,qBAAU,WAGR,OAFAK,IAEO,WACL3D,EAASpC,EAAY,QAEtB,IAGD,qCACE,qBAAKkD,UAAU,UAAf,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,oBACA,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,MAEF,sBAAKA,UAAU,QAAf,UACG8B,IAAcE,GAAW,cAAC,EAAD,MACvB9D,EAAM6B,QAAU,cAAC,EAAD,cAK1BzB,GAAe,cAAC,EAAD,QCnDhByE,EAAO,kBACX,cAAC,IAAD,CAAUvE,MAAOA,EAAjB,SACE,cAAC,IAAD,UACE,cAAC,EAAD,SAKNwE,IAASC,OAAO,cAAC,EAAD,IAAUC,SAASC,eAAe,W","file":"static/js/main.4b5108a4.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\nexport enum TodoActionTypes {\n  REMOVE = 'currentTodo/REMOVE',\n  SET = 'currentTodo/SET',\n}\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: TodoActionTypes.REMOVE };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: TodoActionTypes.SET;\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: TodoActionTypes.REMOVE });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: TodoActionTypes.SET,\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    // Implement all actions here\n    case TodoActionTypes.SET:\n      return action.payload;\n    case TodoActionTypes.REMOVE:\n      return null;\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","/* eslint-disable no-console */\nimport { Status } from '../types/Status';\n\nexport enum FilterActionsTypes {\n  QUERY = 'filter/SET_QUERY',\n  SELECT = 'filter/SET_SELECT',\n}\n\ntype FilterQueryAction = { type: FilterActionsTypes.QUERY, payload: string };\ntype FilterSelectAction = { type: FilterActionsTypes.SELECT, payload: string };\n\nconst setQuery = (query: string): FilterQueryAction => ({\n  type: FilterActionsTypes.QUERY,\n  payload: query,\n});\n\nconst setSelect = (select: Status): FilterSelectAction => ({\n  type: FilterActionsTypes.SELECT,\n  payload: select,\n});\n\nexport const actions = { setQuery, setSelect };\nconsole.log(actions);\n\ntype Action = FilterQueryAction | FilterSelectAction;\n\nexport type State = {\n  query: string,\n  select: 'all',\n};\n\nconst defaultState: State = {\n  query: '',\n  select: 'all',\n};\n\nconst filterReducer = (state: State = defaultState, action: Action) => {\n  switch (action.type) {\n    case FilterActionsTypes.QUERY:\n      return { ...state, query: action.payload };\n    case FilterActionsTypes.SELECT:\n      return { ...state, select: action.payload };\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\nexport enum TodosActionType {\n  SET = 'todos/set',\n}\n\ntype SetAction = { type: TodosActionType.SET, payload: Todo[] };\n\nconst set = (todos: Todo[]): SetAction => ({\n  type: TodosActionType.SET,\n  payload: todos,\n});\n\nexport const actions = { set };\n\nconst todosReducer = (state: Todo[] = [], action: SetAction) => {\n  if (action.type === TodosActionType.SET) {\n    return action.payload;\n  }\n\n  return state;\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport React from 'react';\nimport classNames from 'classnames';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/currentTodo';\nimport { getFilteredTodos } from '../utils/utils';\n\nexport const TodoList: React.FC = () => {\n  const todos = useAppSelector(state => state.todos);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const filter = useAppSelector(state => state.filter);\n  const dispatch = useAppDispatch();\n\n  const filteredTodos = getFilteredTodos(todos, filter);\n\n  return (\n    <>\n      {!filteredTodos.length\n        ? (\n          <p className=\"notification is-warning\">\n            There are no todos matching current filter criteria\n          </p>\n        )\n        : (\n          <table className=\"table is-narrow is-fullwidth\">\n            <thead>\n              <tr>\n                <th>#</th>\n\n                <th>\n                  <span className=\"icon\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                </th>\n\n                <th>Title</th>\n                <th> </th>\n              </tr>\n            </thead>\n\n            <tbody>\n              {filteredTodos.map(todo => {\n                const isCurrent = currentTodo?.id === todo.id;\n\n                return (\n                  <tr data-cy=\"todo\" key={todo.id}>\n                    <td className=\"is-vcentered\">{todo.id}</td>\n                    <td className=\"is-vcentered\">\n                      {todo.completed && (\n                        <span className=\"icon\" data-cy=\"iconCompleted\">\n                          <i className=\"fas fa-check\" />\n                        </span>\n                      )}\n\n                    </td>\n\n                    <td className=\"is-vcentered is-expanded\">\n                      <p className={classNames(\n                        todo.completed ? 'has-text-success' : 'has-text-danger',\n                      )}\n                      >\n                        {todo.title}\n                      </p>\n                    </td>\n\n                    <td className=\"has-text-right is-vcentered\">\n                      <button\n                        data-cy=\"selectButton\"\n                        className=\"button\"\n                        type=\"button\"\n                        onClick={() => dispatch(actions.setTodo(todo))}\n                      >\n                        <span className=\"icon\">\n                          <i className={classNames('far', {\n                            'fa-eye-slash': isCurrent,\n                            'fa-eye': !isCurrent,\n                          })}\n                          />\n                        </span>\n                      </button>\n                    </td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        )}\n\n    </>\n  );\n};\n","import { State } from '../../features/filter';\nimport { Todo } from '../../types/Todo';\n\nconst filterWithQuery = (todos: Todo[], query: string) => {\n  const normalizedQuery = query.trim().toLowerCase();\n\n  return todos.filter(todo => todo.title.toLowerCase().includes(\n    normalizedQuery,\n  ));\n};\n\nconst filterByStatus = (todos: Todo[], status: string) => {\n  switch (status) {\n    case 'active':\n      return todos.filter(todo => !todo.completed);\n    case 'completed':\n      return todos.filter(todo => todo.completed);\n    default:\n      return todos;\n  }\n};\n\nexport const getFilteredTodos = (todos: Todo[], filter: State) => {\n  const { query, select } = filter;\n  let visibleTodos = filterByStatus(todos, select);\n\n  if (query) {\n    visibleTodos = filterWithQuery(visibleTodos, query);\n  }\n\n  return visibleTodos;\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const { query, select } = useAppSelector(state => state.filter);\n  const dispatch = useAppDispatch();\n\n  const handleSelectChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    dispatch(actions.setSelect(event.target.value as Status));\n  };\n\n  const hadleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(actions.setQuery(event.target.value));\n  };\n\n  const hadleQueryRemove = () => {\n    dispatch(actions.setQuery(''));\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={select}\n            onChange={handleSelectChange}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={hadleQueryChange}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={hadleQueryRemove}\n          />\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/currentTodo';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\n\nexport const TodoModal: React.FC = () => {\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n  const [isLoading, setIsLoading] = useState(true);\n  const [isError, setIsError] = useState(false);\n  const [currentUser, setCurrentUser] = useState<User | null>(null);\n\n  const loadUserInfo = async () => {\n    try {\n      setIsError(false);\n      setIsLoading(true);\n      if (currentTodo) {\n        const user = await getUser(currentTodo.id);\n\n        if (user) {\n          setCurrentUser(user);\n        }\n      }\n    } catch {\n      setIsError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadUserInfo();\n\n    return () => {\n      setCurrentUser(null);\n    };\n  }, [currentTodo]);\n\n  const clickHandler = () => {\n    dispatch(actions.removeTodo());\n  };\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading && !isError && <Loader />}\n\n      {!isLoading && !isError && (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${currentTodo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => clickHandler()}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {currentTodo?.title}\n            </p>\n            {currentTodo?.completed\n              ? (<strong className=\"has-text-success\">Done</strong>)\n              : (<strong className=\"has-text-danger\">Planned</strong>)}\n            <p className=\"block\" data-cy=\"modal-user\">\n              <a href={`mailto:${currentUser?.email}`}>\n                {currentUser?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { actions } from './features/todos';\n\nexport const App: React.FC = () => {\n  const todos = useAppSelector(state => state.todos);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n  const [isLoading, setIsLoading] = useState(true);\n  const [isError, setIsError] = useState(false);\n\n  const loadTodos = async () => {\n    try {\n      setIsLoading(true);\n      setIsError(false);\n      const todoResponce = await getTodos();\n\n      if (todoResponce.length) {\n        dispatch(actions.set(todoResponce));\n      }\n    } catch {\n      setIsError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadTodos();\n\n    return () => {\n      dispatch(actions.set([]));\n    };\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n            <div className=\"block\">\n              {isLoading && !isError && <Loader />}\n              {!!todos.length && <TodoList />}\n            </div>\n          </div>\n        </div>\n      </div>\n      {currentTodo && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}